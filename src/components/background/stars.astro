---
const {
  numStars = 75,
  starColor = "white",
  minSize = 5,
  maxSize = 20,
  minDuration = 3,
  maxDuration = 4.5,
} = Astro.props;
---

<div
  id="star-background"
  class="starBackground"
  style={`--star-color: ${starColor};`}
  data-num-stars={numStars}
  data-min-size={minSize}
  data-max-size={maxSize}
  data-min-duration={minDuration}
  data-max-duration={maxDuration}
>
</div>

<script>
  window.onload = function () {
    const starBackground = document.getElementById("star-background");
    if (!starBackground) return;

    const numStars = parseInt(starBackground.dataset.numStars) || 150;
    const minSize = parseInt(starBackground.dataset.minSize) || 1;
    const maxSize = parseInt(starBackground.dataset.maxSize) || 7;
    const minDuration = parseFloat(starBackground.dataset.minDuration) || 4;
    const maxDuration = parseFloat(starBackground.dataset.maxDuration) || 8;

    let stars = [];
    let screenWidth = window.outerWidth;
    let screenHeight = window.outerHeight;
    function getRandom(min, max, skew=1) {
      return Math.pow(Math.random(), skew) * (max - min) + min;
    }

    function createStars() {
      screenWidth = window.outerWidth;
      screenHeight = window.outerHeight;
      starBackground.innerHTML = "";
      stars = [];

      for (let i = 0; i < numStars; i++) {
        const starElement = document.createElement("span");
        starElement.classList.add("star");
        starElement.textContent = "âœ¶";

        const size = getRandom(minSize, maxSize, 3);
        const star = {
          element: starElement,
          x: getRandom(0, screenWidth),
          y: getRandom(0, screenHeight),
          z: getRandom(.3, .9) * size/minSize,
        };

        const duration = getRandom(minDuration, maxDuration);
        const delay = getRandom(0, duration);
        starElement.style.fontSize = `${size}px`;
        starElement.style.lineHeight = `${size}px`;
        starElement.style.animation = `twinkle ${duration}s ease-in-out infinite`;
        starElement.style.animationDelay = `${delay}s`;

        starElement.style.setProperty("--translate-x", `${star.x}px`);
        starElement.style.setProperty("--translate-y", `${star.y}px`);

        starBackground.appendChild(starElement);
        stars.push(star);
      }
    }

    let lastScrollY = window.scrollY;
    function updatePositions() {
      const deltaScroll = window.scrollY - lastScrollY;
      lastScrollY = window.scrollY;

      stars.forEach((star) => {
        star.y -= deltaScroll * star.z;

        // --- Recycle stars that go out of view ---
        // If star scrolls past the top edge, move it to the bottom
        if (star.y < -maxSize) {
          star.x = getRandom(0, screenWidth);
          star.y += screenHeight + maxSize * 2; // Reposition to bottom
        }
        // If star scrolls past the bottom edge, move it to the top
        else if (star.y > screenHeight + maxSize) {
          star.x = getRandom(0, screenWidth);
          star.y -= screenHeight + maxSize * 2; // Reposition to top
        }

        // Apply the new position to the element
        star.element.style.setProperty("--translate-y", `${star.y}px`);
        star.element.style.setProperty("--translate-x", `${star.x}px`);
      });

      requestAnimationFrame(updatePositions);
    }

    createStars();
    requestAnimationFrame(updatePositions);

    let resizeTimeout;
    let lastWidth = window.outerWidth;
    let lastHeight = window.outerHeight;

    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);

      resizeTimeout = setTimeout(() => {
        // Check for significant changes, e.g., device orientation change
        const newWidth = window.outerWidth;
        const newHeight = window.outerHeight;

        // Regenerate only if width or height changes substantially, or aspect ratio flips
        if (
          Math.abs(newWidth - lastWidth) > 50 || // More than 50px width change
          Math.abs(newHeight - lastHeight) > 50 // More than 50px height change
        ) {
          createStars();
        }

        lastWidth = newWidth;
        lastHeight = newHeight;
      }, 200); // Debounce for performance
    });
  };
</script>

<style lang="scss" is:global>
  .starBackground {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: -1;
    pointer-events: none;
  }

  .star {
    position: absolute;
    top: 0;
    left: 0;
    color: var(--star-color, white);
    display: inline-block;
    text-shadow: 0 0 15px rgba(255, 255, 255, 1);
    transform: translate3d(var(--translate-x, 0px), var(--translate-y, 0px), 0)
      scale(var(--animation-scale, 1));
    will-change: transform;
  }

  @keyframes twinkle {
    0% {
      opacity: 1;
      --animation-scale: 1;
      text-shadow:
        0 0 20px rgba(255, 255, 255, 1),
        0 0 30px rgba(255, 255, 255, 0.8);
    }
    30%,
    85% {
      opacity: 0.8;
      --animation-scale: 0.7;
      text-shadow: 0 0 15px rgba(255, 255, 255, 1);
    }
    100% {
      opacity: 1;
      --animation-scale: 1;
      text-shadow:
        0 0 20px rgba(255, 255, 255, 1),
        0 0 30px rgba(255, 255, 255, 0.8);
    }
  }
</style>

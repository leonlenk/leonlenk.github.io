---
const {
  numStars = 75,
  starColor = "white",
  minSize = 5,
  maxSize = 20,
  minDuration = 3,
  maxDuration = 4.5,
} = Astro.props;
---

<div
  id="star-background"
  class="starBackground"
  style={`--star-color: ${starColor};`}
  data-num-stars={numStars}
  data-min-size={minSize}
  data-max-size={maxSize}
  data-min-duration={minDuration}
  data-max-duration={maxDuration}
>
</div>

<script>
  window.onload = function() {
  const starBackground = document.getElementById("star-background");
  const stars = [];

  if (starBackground) {
    const numStars = parseInt(starBackground.dataset.numStars);
    const minSize = parseInt(starBackground.dataset.minSize);
    const maxSize = parseInt(starBackground.dataset.maxSize);
    const minDuration = parseFloat(starBackground.dataset.minDuration);
    const maxDuration = parseFloat(starBackground.dataset.maxDuration);

    function getRandom(min, max) {
      return Math.random() * (max - min) + min;
    }

    function getRandomInt(min, max) {
      max = Math.floor(max);
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function generateStars() {
      starBackground.innerHTML = "";
      stars.length = 0;

      for (let i = 0; i < numStars * document.body.clientHeight / window.innerHeight; i++) {
        const star = document.createElement("span");
        star.classList.add("star");
        star.textContent = "âœ¶";

        // Random size
        const size = getRandomInt(minSize, maxSize);
        star.style.fontSize = `${size}px`;
        star.style.lineHeight = `${size}px`;

        // Store initial position as CSS custom properties
        // This allows `transform: translateY` for parallax without affecting base position
        const initialTop = getRandom(-20, 120);
        const initialLeft = getRandom(0, 100);
        star.style.setProperty("--initial-top", `${initialTop}%`);
        star.style.setProperty("--initial-left", `${initialLeft}lvw`);

        // Set the base position using CSS vars
        star.style.top = `var(--initial-top)`;
        star.style.left = `var(--initial-left)`;

        // Random animation duration and delay
        const duration = getRandom(minDuration, maxDuration);
        const delay = getRandom(0, maxDuration);
        star.style.animation = `twinkle ${duration}s ease-in-out infinite ${delay}s`;

        // Assign a parallax speed factor (smaller factors = move less = further away)
        // You can tie this to star size (e.g., smaller stars get smaller factors)
        const parallaxFactor = getRandom(0.01 * size, 0.08 * size); // Adjust this range for desired depth effect
        star.dataset.parallaxFactor = parallaxFactor; // Store factor on element

        starBackground.appendChild(star);
        stars.push(star); // Add to the array for parallax updates
      }
    }

    let currentScrollY = window.scrollY;

    function updateParallax() {
      const newScrollY = window.scrollY;
      // Calculate the difference in scroll since the last frame
      const deltaScroll = newScrollY - currentScrollY;
      currentScrollY = newScrollY; // Update for the next frame

      if (stars.length > 0) {
        stars.forEach((star) => {
          const factor = parseFloat(star.dataset.parallaxFactor);
          const currentTranslateY = parseFloat(
            star.style.getPropertyValue("--parallax-offset-y") || 0,
          );
          const newTranslateY = currentTranslateY - deltaScroll * factor;

          star.style.setProperty("--parallax-offset-y", `${newTranslateY}px`);
        });
      }
      requestAnimationFrame(updateParallax);
    }

    generateStars(); // Generate stars on initial load
    updateParallax(); // Start the parallax update loop immediately

    let resizeTimeout;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(generateStars, 200); // Debounce for performance
    });
  }
}
</script>

<style lang="scss" is:global>
  .starBackground {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .star {
    position: absolute;
    color: var(--star-color, white);
    opacity: 0.8;
    display: inline-block;
    pointer-events: none;
    animation-direction: normal;
    text-shadow: 0 0 15px rgba(255, 255, 255, 1);
    text-align: center;
    vertical-align: middle;
    top: var(--initial-top);
    left: var(--initial-left);

    scale: var(--animation-scale, 1);
    translate: 0 var(--parallax-offset-y, 0px);
  }

  @keyframes twinkle {
    0% {
      opacity: 1;
      --animation-scale: 1;
      text-shadow:
        0 0 20px rgba(255, 255, 255, 1),
        0 0 30px rgba(255, 255, 255, 0.8);
    }
    30%,
    80% {
      opacity: 0.8;
      --animation-scale: 0.7;
      text-shadow: 0 0 15px rgba(255, 255, 255, 1);
    }
    100% {
      opacity: 1;
      --animation-scale: 1;
      text-shadow:
        0 0 20px rgba(255, 255, 255, 1),
        0 0 30px rgba(255, 255, 255, 0.8);
    }
  }
</style>

---
import Globals from "../components/globals/globals.astro";
import Navbar from "../components/navbar/navbar.astro";
const { frontmatter } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{frontmatter.title}</title>
  </head>
  <body>
    <Globals />
    <Navbar />

    <main class="blog-container">
      <article class="blog-post">
        <!-- Reading Progress Bar -->
        <div class="reading-progress-container">
          <div class="reading-progress-bar" id="reading-progress"></div>
          <div class="sections-list" id="sections-list"></div>
        </div>
        <header class="blog-header">
          <h1 class="blog-title">{frontmatter.title}</h1>
          <div class="blog-meta">
            <time class="blog-date">
              {new Date(frontmatter.pubDate).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
              })}
            </time>
            <span class="blog-author">by {frontmatter.author}</span>
            <div class="blog-tags">
              {frontmatter.tags.map((tag) => (
                <span class="tag">{tag}</span>
              ))}
            </div>
          </div>
        </header>
        
        <div class="blog-content">
          <slot />
        </div>
      </article>
    </main>

    <script>
      // Set dark theme by default
      document.documentElement.setAttribute('data-theme', 'dark');

      // Reading Progress Bar functionality
      function initReadingProgress() {
        const progressBar = document.getElementById('reading-progress');
        const sectionsList = document.getElementById('sections-list');
        const content = document.querySelector('.blog-content');
        
        if (!progressBar || !content) return;

        // Get all headers from the content
        const headers = content.querySelectorAll('h1, h2, h3, h4, h5, h6');
        let currentHeaderIndex = -1;

        // Populate sections list with simple tree structure
        function populateSectionsList() {
          if (!sectionsList || headers.length === 0) return;
          
          sectionsList.innerHTML = '';
          
          headers.forEach((header, index) => {
            const sectionItem = document.createElement('div');
            sectionItem.className = `section-item ${header.tagName.toLowerCase()}`;
            sectionItem.dataset.index = index;
            
            const headerLevel = parseInt(header.tagName.charAt(1));
            
            // Simple tree prefix
            let treePrefix = "";
            if (headerLevel > 1) {
              // Check if this is the last item at this level
              let isLast = true;
              for (let i = index + 1; i < headers.length; i++) {
                const nextHeaderLevel = parseInt(headers[i].tagName.charAt(1));
                if (nextHeaderLevel === headerLevel) {
                  isLast = false;
                  break;
                } else if (nextHeaderLevel < headerLevel) {
                  break;
                }
              }
              
              treePrefix = isLast ? "└─ " : "├─ ";
            }
            
            const prefixSpan = document.createElement('span');
            prefixSpan.className = 'tree-prefix';
            prefixSpan.textContent = treePrefix;
            
            const textSpan = document.createElement('span');
            textSpan.textContent = header.textContent;
            
            sectionItem.appendChild(prefixSpan);
            sectionItem.appendChild(textSpan);
            
            // Add dynamic indentation
            sectionItem.style.marginLeft = `${(headerLevel - 1) * 12}px`;
            
            // Add dynamic font size based on header level
            const fontSize = Math.max(0.7, 0.95 - (headerLevel - 1) * 0.05);
            sectionItem.style.fontSize = `${fontSize}rem`;
            
            sectionsList.appendChild(sectionItem);
          });
        }

        // Initialize sections list
        populateSectionsList();

        function updateProgress() {
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          const contentTop = content.offsetTop;
          const contentBottom = contentTop + content.offsetHeight;
          const navbarHeight = 80;
          
          if (scrollTop + navbarHeight >= contentTop && scrollTop <= contentBottom) {
            // Calculate progress within the content area
            const contentScrollTop = scrollTop + navbarHeight - contentTop;
            const contentScrollHeight = content.offsetHeight - window.innerHeight + navbarHeight;
            const contentScrollPercent = Math.max(0, Math.min(100, (contentScrollTop / contentScrollHeight) * 100));
            
            progressBar.style.height = contentScrollPercent + '%';
            progressBar.style.opacity = '1';
            sectionsList.classList.add('active');

            // Update current header
            let newHeaderIndex = -1;
            const scrollPosition = scrollTop + navbarHeight + 100;
            
            headers.forEach((header, index) => {
              const headerTop = header.offsetTop;
              const headerBottom = headerTop + header.offsetHeight;
              
              if (scrollPosition >= headerTop && scrollPosition < headerBottom) {
                newHeaderIndex = index;
              }
            });

            // If no header is found, find the last header that's above the scroll position
            if (newHeaderIndex === -1) {
              for (let i = headers.length - 1; i >= 0; i--) {
                if (scrollPosition >= headers[i].offsetTop) {
                  newHeaderIndex = i;
                  break;
                }
              }
            }

            // Update active section in sidebar
            const sectionItems = sectionsList.querySelectorAll('.section-item');
            sectionItems.forEach((item, index) => {
              item.classList.remove('active');
              item.style.color = '';
              item.style.textShadow = '';
              item.style.fontWeight = '';
              
              if (index === newHeaderIndex) {
                item.classList.add('active');
                item.style.color = '#ffffff';
                item.style.textShadow = '0 0 8px rgba(255, 255, 255, 0.6)';
                item.style.fontWeight = '600';
              }
            });

            // Highlight the current section in the sidebar
            if (newHeaderIndex !== -1) {
              const currentSectionItem = sectionsList.querySelector(`[data-index="${newHeaderIndex}"]`);
              if (currentSectionItem) {
                currentSectionItem.scrollIntoView({
                  behavior: 'smooth',
                  block: 'center'
                });
              }
            }

            currentHeaderIndex = newHeaderIndex;
          } else if (scrollTop + navbarHeight < contentTop) {
            progressBar.style.height = '0%';
            progressBar.style.opacity = '0.3';
            sectionsList.classList.remove('active');
            currentHeaderIndex = -1;
          } else {
            progressBar.style.height = '100%';
            progressBar.style.opacity = '1';
            sectionsList.classList.remove('active');
            currentHeaderIndex = -1;
          }
        }

        // Update progress on scroll
        window.addEventListener('scroll', () => {
          requestAnimationFrame(updateProgress);
        });

        // Initial call
        updateProgress();
      }

      // Initialize reading progress when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initReadingProgress);
      } else {
        initReadingProgress();
      }
    </script>

  </body>
</html>

<style lang="scss">
  :root {
    --bg-primary: #1c1934;
    --bg-secondary: #2d2d2d;
    --text-primary: #ffffff;
    --text-secondary: #b0b0b0;
    --text-muted: #888888;
    --border-color: #404040;
    --accent-color: #4a9eff;
    --tag-bg: #333333;
    --tag-text: #cccccc;
  }

  body {
    background-color: var(--bg-primary);
    color: var(--text-primary);
    margin: 0;
    padding: 0;
    font-family: "Open Sans", sans-serif;
    font-weight: 400;
  }

  /* Reading Progress Bar */
  .reading-progress-container {
    position: fixed;
    top: 90px;
    left: 0;
    width: 6px;
    height: 75vh;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 0 3px 3px 0;
    z-index: 1001;
    margin-left: 10px;
  }

  .reading-progress-bar {
    width: 100%;
    height: 0%;
    background: linear-gradient(180deg, #4a90e2 0%, #9b59b6 50%, #e74c3c 100%);
    transition: height 0.1s ease-out, opacity 0.3s ease;
    opacity: 0.8;
    border-radius: 0 3px 3px 0;
  }

  .sections-list {
    position: absolute;
    left: 30px;
    top: 0;
    width: 250px;
    font-family: "Lora", serif;
    font-size: 0.9rem;
    color: var(--text-secondary);
    line-height: 1.4;
    max-height: 75vh;
    overflow-y: auto;
    overflow-x: hidden;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    box-sizing: border-box;
  }

  .sections-list.active {
    opacity: 1;
  }

  .section-item {
    margin-bottom: 4px;
    padding: 6px 8px;
    border-radius: 4px;
    transition: all 0.3s ease;
    cursor: pointer;
    opacity: 0.6;
    position: relative;
    font-family: "Courier New", monospace;
    font-size: 0.85rem;
    box-sizing: border-box;
    width: 100%;
    overflow: hidden;
    display: flex;
    align-items: center;
    white-space: pre;
  }

  .section-item:hover {
    opacity: 0.8;
    background: rgba(255, 255, 255, 0.05);
  }

  .section-item.active {
    opacity: 1;
    color: #ffffff;
    font-weight: 600;
    text-shadow: 0 0 8px rgba(255, 255, 255, 0.6);
  }

  .section-item.h1 { 
    font-weight: 600;
    color: var(--text-primary);
  }
  
  .section-item.h2 { 
    font-weight: 500;
  }
  
  .section-item.h3 { 
    font-weight: 400;
  }
  
  .section-item.h4 { 
    font-weight: 400;
  }
  
  .section-item.h5 { 
    font-weight: 400;
  }
  
  .section-item.h6 { 
    font-weight: 400;
  }

  .tree-prefix {
    color: var(--accent-color);
    font-weight: bold;
    font-family: "Courier New", monospace;
    white-space: pre;
  }

  /* Blog Container */
  .blog-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 90px 20px 40px 20px;
    min-height: 100vh;
  }

  /* Blog Post */
  .blog-post {
    background: var(--bg-secondary);
    border-radius: 12px;
    padding: 40px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    border: 1px solid var(--border-color);
    position: relative;
  }

  /* Blog Header */
  .blog-header {
    margin-bottom: 40px;
    padding-bottom: 30px;
    position: relative;
  }

  .blog-header::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: linear-gradient(90deg, 
      rgba(255, 0, 0, 0.4), rgba(255, 127, 0, 0.4), rgba(255, 255, 0, 0.4), rgba(0, 255, 0, 0.4), 
      rgba(0, 0, 255, 0.4), rgba(75, 0, 130, 0.4), rgba(148, 0, 211, 0.4), rgba(255, 0, 0, 0.4));
    background-size: 200% 100%;
    animation: rainbow-slide 4s linear infinite;
    border-radius: 1px;
  }

  @keyframes rainbow-slide {
    0% {
      background-position: 0% 50%;
    }
    100% {
      background-position: 200% 50%;
    }
  }

  .blog-title {
    font-family: "Lora", serif;
    font-size: 2.5rem;
    font-weight: 700;
    color: #ffffff;
    margin: 0 0 20px 0;
    line-height: 1.2;
    text-align: left;
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.4);
    letter-spacing: 0.03em;
  }

  .blog-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    align-items: center;
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  .blog-date {
    font-weight: 500;
  }

  .blog-author {
    font-style: italic;
  }

  .blog-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .tag {
    background: var(--tag-bg);
    color: var(--tag-text);
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
    border: 1px solid var(--border-color);
    position: relative;
    animation: rainbow-glow 3s ease-in-out infinite;
  }

  .tag::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, 
      #ff0000, #ff7f00, #ffff00, #00ff00, 
      #0000ff, #4b0082, #9400d3, #ff0000);
    background-size: 400% 400%;
    border-radius: 22px;
    z-index: -1;
    animation: rainbow-border 3s ease-in-out infinite;
    opacity: 0.5;
  }

  @keyframes rainbow-glow {
    0%, 100% {
      box-shadow: 
        0 0 4px rgba(255, 0, 0, 0.35),
        0 0 8px rgba(255, 127, 0, 0.25),
        0 0 12px rgba(255, 255, 0, 0.15);
    }
    16.66% {
      box-shadow: 
        0 0 4px rgba(255, 127, 0, 0.35),
        0 0 8px rgba(255, 255, 0, 0.25),
        0 0 12px rgba(0, 255, 0, 0.15);
    }
    33.33% {
      box-shadow: 
        0 0 4px rgba(255, 255, 0, 0.35),
        0 0 8px rgba(0, 255, 0, 0.25),
        0 0 12px rgba(0, 0, 255, 0.15);
    }
    50% {
      box-shadow: 
        0 0 4px rgba(0, 255, 0, 0.35),
        0 0 8px rgba(0, 0, 255, 0.25),
        0 0 12px rgba(75, 0, 130, 0.15);
    }
    66.66% {
      box-shadow: 
        0 0 4px rgba(0, 0, 255, 0.35),
        0 0 8px rgba(75, 0, 130, 0.25),
        0 0 12px rgba(148, 0, 211, 0.15);
    }
    83.33% {
      box-shadow: 
        0 0 4px rgba(75, 0, 130, 0.35),
        0 0 8px rgba(148, 0, 211, 0.25),
        0 0 12px rgba(255, 0, 0, 0.15);
    }
  }

  @keyframes rainbow-border {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  /* Blog Content */
  .blog-content {
    color: var(--text-primary);
    font-size: 1.1rem;
    line-height: 1.7;
  }

  .blog-content h1,
  .blog-content h2,
  .blog-content h3,
  .blog-content h4,
  .blog-content h5,
  .blog-content h6 {
    font-family: "Lora", serif;
    color: #ffffff;
    margin-top: 2rem;
    margin-bottom: 1rem;
    font-weight: 600;
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.4);
    letter-spacing: 0.03em;
    transition: all 0.3s ease;
  }

  .blog-content h1 {
    font-size: 2rem;
  }

  .blog-content h2 {
    font-size: 1.75rem;
  }

  .blog-content h3 {
    font-size: 1.5rem;
  }

  .blog-content p {
    margin-bottom: 1.5rem;
    color: var(--text-primary);
  }

  .blog-content a {
    color: var(--accent-color);
    text-decoration: none;
    transition: color 0.3s ease, text-shadow 0.3s ease;
  }

  .blog-content a:hover {
    color: #ffffff;
    text-shadow: 0 0 12px rgba(255, 255, 255, 0.8);
  }

  .blog-content ul,
  .blog-content ol {
    margin-bottom: 1.5rem;
    padding-left: 2rem;
  }

  .blog-content li {
    margin-bottom: 0.5rem;
  }

  .blog-content blockquote {
    border-left: 4px solid var(--accent-color);
    padding-left: 1.5rem;
    margin: 2rem 0;
    font-style: italic;
    color: var(--text-secondary);
  }

  .blog-content code {
    background: var(--bg-primary);
    padding: 2px 6px;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
    font-size: 0.9em;
    color: var(--accent-color);
  }

  .blog-content pre {
    background: var(--bg-primary);
    padding: 1.5rem;
    border-radius: 8px;
    overflow-x: auto;
    margin: 2rem 0;
    border: 1px solid var(--border-color);
  }

  .blog-content pre code {
    background: none;
    padding: 0;
    color: var(--text-primary);
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .reading-progress-container {
      left: 0;
      top: 140px;
    }

    .sections-list {
      display: none;
    }

    .blog-container {
      padding: 140px 15px 40px 15px;
    }

    .blog-post {
      padding: 25px;
    }

    .blog-title {
      font-size: 2rem;
    }

    .blog-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }
  }

  @media (max-width: 600px) {
    .reading-progress-container {
      display: none;
    }
  }

  @media (max-width: 480px) {
    .blog-container {
      padding: 100px 15px 40px 15px;
    }

    .blog-post {
      padding: 20px;
    }

    .blog-title {
      font-size: 1.75rem;
    }
  }
</style>